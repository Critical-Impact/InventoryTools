// using System.Collections.Generic;
// using System.Linq;
// using AllaganLib.GameSheets.Sheets.Caches;
// using AllaganLib.GameSheets.Sheets.Rows;
// using CriticalCommonLib.Models;
// using InventoryTools.Logic.Filters.Abstract;
// using InventoryTools.Services;
// using Microsoft.Extensions.Logging;
//
// namespace InventoryTools.Logic.Filters
// {
//     public class PurchasedWithCurrencyFilter : UintMultipleChoiceFilter
//     {
//         public PurchasedWithCurrencyFilter(ILogger<PurchasedWithCurrencyFilter> logger, ImGuiService imGuiService) : base(logger, imGuiService)
//         {
//         }
//
//         public override string Key { get; set; } = "PurchaseWithCurrency";
//         public override string Name { get; set; } = "Purchased with Currency";
//
//         public override string HelpText { get; set; } =
//             "Filter items based on the currency they can be purchased with.";
//
//         public override FilterCategory FilterCategory { get; set; } = FilterCategory.Acquisition;
//
//         public override List<uint> DefaultValue { get; set; } = new();
//
//
//
//         public override bool? FilterItem(FilterConfiguration configuration, InventoryItem item)
//         {
//             return FilterItem(configuration,item.Item);
//         }
//
//         public override bool? FilterItem(FilterConfiguration configuration, ItemRow item)
//         {
//             var currentValue = CurrentValue(configuration);
//             if (currentValue.Count == 0)
//             {
//                 return null;
//             }
//
//             return currentValue.Any(u => item.HasUsesByCategory(ItemInfoCategory.Shop));
//         }
//
//         public override Dictionary<uint, string> GetChoices(FilterConfiguration configuration)
//         {
//             var currencies = _excelCache.GetCurrencies(3);
//             currencies.Add(20);
//             currencies.Add(21);
//             currencies.Add(22);
//
//             return currencies.ToDictionary(c => c, c => _excelCache.GetItemSheet().GetRow(c)?.NameString ?? "Unknown").OrderBy(c => c.Value).ToDictionary(c => c.Key, c => c.Value);
//         }
//
//         public override bool HideAlreadyPicked { get; set; } = true;
//     }
// }

//TODO: Fix ME